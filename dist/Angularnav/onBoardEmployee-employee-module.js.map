{"version":3,"sources":["webpack:///./src/app/layout/onBoardEmployee/employee-routing.module.ts","webpack:///./src/app/layout/onBoardEmployee/employee.component.css","webpack:///./src/app/layout/onBoardEmployee/employee.component.html","webpack:///./src/app/layout/onBoardEmployee/employee.component.ts","webpack:///./src/app/layout/onBoardEmployee/employee.module.ts"],"names":[],"mappings":"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","file":"onBoardEmployee-employee-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { EmployeeComponent } from './employee.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: EmployeeComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class EmployeeRoutingModule {}","module.exports = \" .my-form{\\r\\n    min-width: 150px;\\r\\n    max-width: 500px;\\r\\n    width: 80%;\\r\\n  }\\r\\n   \\r\\n  .full-width {\\r\\n    width: 60%;\\r\\n  }\\r\\n   \\r\\n  .center{\\r\\n    width: 75%;\\r\\n    margin: 10px auto;\\r\\n  }\\r\\n   \\r\\n  .main-div{\\r\\n    height: 100vh;\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n  }\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGF5b3V0L29uQm9hcmRFbXBsb3llZS9lbXBsb3llZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFDO0lBQ0csZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixVQUFVO0VBQ1o7O0VBRUE7SUFDRSxVQUFVO0VBQ1o7O0VBR0E7SUFDRSxVQUFVO0lBQ1YsaUJBQWlCO0VBQ25COztFQUVBO0lBQ0UsYUFBYTtJQUNiLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0VBQ3JCIiwiZmlsZSI6InNyYy9hcHAvbGF5b3V0L29uQm9hcmRFbXBsb3llZS9lbXBsb3llZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiIC5teS1mb3Jte1xyXG4gICAgbWluLXdpZHRoOiAxNTBweDtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICB3aWR0aDogODAlO1xyXG4gIH1cclxuICAgXHJcbiAgLmZ1bGwtd2lkdGgge1xyXG4gICAgd2lkdGg6IDYwJTtcclxuICB9IFxyXG5cclxuXHJcbiAgLmNlbnRlcntcclxuICAgIHdpZHRoOiA3NSU7XHJcbiAgICBtYXJnaW46IDEwcHggYXV0bztcclxuICB9XHJcbiAgXHJcbiAgLm1haW4tZGl2e1xyXG4gICAgaGVpZ2h0OiAxMDB2aDtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgfVxyXG4iXX0= */\"","module.exports = \"<div class=\\\"container\\\">\\r\\n \\r\\n<mat-toolbar >\\r\\n        <div style=\\\"text-align:center\\\">\\r\\n                <span style=\\\"  display: inline-block;\\r\\n               \\r\\n                margin: 10px 10px 0 0;\\r\\n                padding: 5px 10px\\\">Register Employee</span>\\r\\n        </div>\\r\\n  </mat-toolbar>\\r\\n  <mat-card class=\\\"my-card\\\">      \\r\\n      <!-- CONTENT HERE -->\\r\\n  \\r\\n  <mat-card-content class=\\\"z-depth center\\\" flex=\\\"50\\\">\\r\\n    <form class=\\\"my-form\\\" [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"register()\\\">\\r\\n       <mat-form-field class=\\\"full-width\\\">\\r\\n              <mat-label>Employee First Name</mat-label>\\r\\n              <!-- <input  matInput  placeholder=\\\"Employee First Name\\\"  [(ngModel)]=\\\"Employee.firstName\\\" name=\\\"firstName\\\"  required> -->\\r\\n              <input  matInput  placeholder=\\\"Employee First Name\\\"  formControlName=\\\"firstName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors }\\\"  required>\\r\\n              \\r\\n                <mat-error class=\\\"error-message\\\" *ngIf=\\\"accountDetailsForm.get('email').hasError(validation.type) && (accountDetailsForm.get('email').dirty || accountDetailsForm.get('email').touched)\\\">{{validation.message}}</mat-error>\\r\\n       \\r\\n           </mat-form-field><br>\\r\\n\\r\\n           <mat-form-field class=\\\"full-width\\\">\\r\\n              <mat-label>Employee Last Name</mat-label>\\r\\n              <!-- <input  matInput  placeholder=\\\"Employee Last Name\\\"  [(ngModel)]=\\\"Employee.lastName\\\" name=\\\"lastName\\\"  required> -->\\r\\n              <input  matInput  placeholder=\\\"Employee Last Name\\\"  [(ngModel)]=\\\"Employee.lastName\\\" name=\\\"lastName\\\"  required>\\r\\n           </mat-form-field><br>\\r\\n\\r\\n           <mat-form-field class=\\\"full-width\\\">\\r\\n              <mat-label>Employee Email</mat-label>\\r\\n              <input  matInput type=\\\"email\\\" placeholder=\\\"Employee Email\\\" name=\\\"email\\\"  [(ngModel)]=\\\"Employee.email\\\" required>\\r\\n           </mat-form-field><br>\\r\\n           <!-- <mat-form-field>\\r\\n                <input matInput type=\\\"password\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\" (input)=\\\"onPasswordInput()\\\">\\r\\n                <mat-error *ngIf=\\\"password.hasError('required')\\\">Password is required</mat-error>\\r\\n                <mat-error *ngIf=\\\"password.hasError('minlength')\\\">Password must have at least {{minPw}} characters</mat-error>\\r\\n              </mat-form-field>\\r\\n            \\r\\n              <mat-form-field>\\r\\n                <input matInput type=\\\"password\\\" placeholder=\\\"Confirm password\\\" formControlName=\\\"password2\\\" (input)=\\\"onPasswordInput()\\\">\\r\\n                <mat-error *ngIf=\\\"password2.hasError('required')\\\">Please confirm your password</mat-error>\\r\\n                <mat-error *ngIf=\\\"password2.invalid && !password2.hasError('required')\\\">Passwords don't match</mat-error>\\r\\n              </mat-form-field> -->\\r\\n              <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"New password\\\" type=\\\"password\\\" [(ngModel)]=\\\"Employee.password\\\" name=\\\"password\\\" required>\\r\\n                    <mat-error *ngIf=\\\"myForm.hasError('required', 'password')\\\">\\r\\n                        Please enter your newpassword\\r\\n                    </mat-error>\\r\\n                </mat-form-field><br>\\r\\n            \\r\\n                <mat-form-field>\\r\\n                    <input matInput placeholder=\\\"Confirm password\\\" type=\\\"password\\\"  [errorStateMatcher]=\\\"matcher\\\">\\r\\n                      <mat-error *ngIf=\\\"myForm.hasError('notSame')\\\">\\r\\n                        Passwords do not match\\r\\n                    </mat-error>  \\r\\n                </mat-form-field><br>\\r\\n\\r\\n              <mat-form-field class=\\\"full-width\\\">\\r\\n                    <mat-label>Age</mat-label>\\r\\n                    <input  matInput  placeholder=\\\"age\\\" name=\\\"age\\\" [(ngModel)]=\\\"Employee.age\\\"  required>\\r\\n                 </mat-form-field><br>\\r\\n\\r\\n              <section class=\\\"example-section\\\">\\r\\n                    <label class=\\\"example-margin\\\">Gender:</label>\\r\\n                    <mat-radio-group name=\\\"gender\\\" [(ngModel)]=\\\"Employee.gender\\\" required> <!--[(ngModel)]=\\\"gender\\\"-->\\r\\n                      <mat-radio-button class=\\\"example-margin\\\" value=\\\"after\\\" style=\\\"margin-left: 5px\\\" value=\\\"male\\\"  >Male</mat-radio-button>\\r\\n                      <mat-radio-button class=\\\"example-margin\\\" value=\\\"before\\\" style=\\\"margin-left: 5px\\\" value=\\\"female\\\"   >Female</mat-radio-button>\\r\\n                      <mat-radio-button class=\\\"example-margin\\\" value=\\\"before\\\" style=\\\"margin-left: 5px\\\" value=\\\"other\\\"  >Other</mat-radio-button>\\r\\n                    </mat-radio-group>\\r\\n                  </section>\\r\\n\\r\\n                  <mat-form-field class=\\\"full-width\\\">\\r\\n                        <mat-label>Mobile No</mat-label>\\r\\n                        <input  matInput  placeholder=\\\"Mobile Number\\\" name=\\\"mobile\\\" [(ngModel)]=\\\"Employee.mobile\\\" required>\\r\\n                     </mat-form-field><br>\\r\\n\\r\\n                     <mat-form-field hintLabel=\\\"select one\\\">\\r\\n                            <mat-select placeholder=\\\"Select Role\\\" [(ngModel)]=\\\"Employee.role\\\" name=\\\"role\\\" (ngModelChange)=\\\"selectRole()\\\">\\r\\n                            \\r\\n                                <mat-option *ngFor=\\\"let role of roles\\\" [value]=\\\"role.id\\\" >\\r\\n                                                    {{ role.name }}\\r\\n                                </mat-option>\\r\\n                            </mat-select>\\r\\n                            </mat-form-field><br>\\r\\n\\r\\n                            <mat-form-field class=\\\"full-width\\\" *ngIf=\\\"AgentBoolean\\\">\\r\\n                              <mat-label>Plivo Agent Username</mat-label>\\r\\n                              <input  matInput  placeholder=\\\"Plivo Agent User name\\\" name=\\\"plivoagentusername\\\" [(ngModel)]=\\\"Employee.plivoagentusername\\\" required>\\r\\n                           </mat-form-field>\\r\\n\\r\\n                           <mat-form-field class=\\\"full-width\\\" *ngIf=\\\"AgentBoolean\\\">\\r\\n                            <mat-label>Plivo Agent Password</mat-label>\\r\\n                            <input  matInput  placeholder=\\\"Plivo Agent Password\\\" name=\\\"plivoagentPassword\\\" [(ngModel)]=\\\"Employee.plivoagentPassword\\\" required>\\r\\n                         </mat-form-field>\\r\\n\\r\\n                         <mat-form-field class=\\\"full-width\\\" *ngIf=\\\"AgentBoolean\\\">\\r\\n                          <mat-label>Plivo Agent Alias</mat-label>\\r\\n                          <input  matInput  placeholder=\\\"Plivo Agent Alias\\\" name=\\\"plivoagnetalias\\\" [(ngModel)]=\\\"Employee.plivoagnetalias\\\" required>\\r\\n                       </mat-form-field>\\r\\n\\r\\n\\r\\n           <mat-form-field class=\\\"full-width\\\">\\r\\n              <mat-label>Address</mat-label>\\r\\n              <input  matInput  placeholder=\\\"Address\\\" name=\\\"address\\\" [(ngModel)]=\\\"Employee.address\\\">\\r\\n           </mat-form-field><br>\\r\\n\\r\\n           <mat-form-field class=\\\"full-width\\\">\\r\\n              <mat-label>City</mat-label>\\r\\n              <input  matInput  placeholder=\\\"City\\\"  name=\\\"city\\\" [(ngModel)]=\\\"Employee.city\\\">\\r\\n           </mat-form-field>\\r\\n        \\r\\n       \\r\\n          <!-- <mat-form-field>\\r\\n            <mat-label>Date of Birth</mat-label>\\r\\n        <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\r\\n        <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n        <mat-datepicker #picker></mat-datepicker>\\r\\n      </mat-form-field> -->\\r\\n\\r\\n      <mat-card-content>\\r\\n        <form class=\\\"my-form\\\">\\r\\n           <!--FORM FIELDS-->\\r\\n        </form>\\r\\n      </mat-card-content>\\r\\n      <!-- <mat-card-actions>\\r\\n        <button mat-raised-button (click)=\\\"register()\\\" color=\\\"primary\\\">REGISTER</button>\\r\\n      </mat-card-actions> -->\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <button class=\\\"btn btn-primary\\\">Register</button>\\r\\n    </div>\\r\\n    </form>\\r\\n  </mat-card-content>\\r\\n    \\r\\n    <mat-card-actions>\\r\\n      <!-- REGISTER BUTTON -->\\r\\n    </mat-card-actions>\\r\\n  </mat-card>\\r\\n\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\n//import { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n//import { FarmService } from '../../farm.service';\r\nimport { AutoDialService } from '../../autoDialer.service';\r\nimport { FormControl, FormGroupDirective, NgForm, Validators, FormGroup, FormBuilder } from '@angular/forms';\r\n\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\n@Component({\r\n    selector: 'app-employee',\r\n    templateUrl: './employee.component.html',\r\n    styleUrls: ['./employee.component.css']\r\n})\r\nexport class EmployeeComponent implements OnInit {\r\n  registerForm: FormGroup;\r\n    constructor(private formBuilder: FormBuilder, private service:  AutoDialService) {\r\n        // this.myForm = this.formBuilder.group({\r\n        //     password: ['', [Validators.required]],\r\n        //     confirmPassword: ['']\r\n        //   }, { validator: this.checkPasswords });\r\n        this.registerForm = this.formBuilder.group({\r\n          firstName: ['', Validators.required],\r\n          lastName: ['', Validators.required],\r\n          email: ['', [Validators.required, Validators.email]],\r\n          password: ['', [Validators.required, Validators.minLength(6)]],\r\n          confirmPassword: ['', Validators.required]\r\n      }, {\r\n          validator: this.checkPasswords,//MustMatch('password', 'confirmPassword')\r\n      });\r\n      \r\n    }\r\n    Employee = {};\r\n    AgentBoolean: Boolean = false;\r\n\r\n    ngOnInit() {\r\n       \r\n    }\r\n\r\n    roles =[\r\n        { id:1, name: 'Admin'},\r\n        { id:2, name: 'Manager'},\r\n        { id:3, name: 'Agent'},\r\n        \r\n    ]\r\n    myForm: FormGroup;\r\n\r\n    matcher = new MyErrorStateMatcher();\r\n    selectRole(){\r\n      debugger;\r\n     if(this.Employee['role'] == 3){\r\n       this.AgentBoolean = true;\r\n     }else{\r\n       this.AgentBoolean = false;\r\n     }\r\n    }\r\n \r\n    checkPasswords(group: FormGroup) { // here we have the 'passwords' group\r\n      let pass = group.controls.password.value;\r\n      let confirmPass = group.controls.confirmPassword.value;\r\n  \r\n      return pass === confirmPass ? null : { notSame: true }\r\n    }\r\n    register(){\r\n      if (this.registerForm.invalid) {\r\n        return;\r\n    }\r\n    //  this.service.saveEmployee(this.Employee).subscribe((data)=>{\r\n    //      console.log(data);\r\n    //      if(data.success === true){\r\n    //        alert('data successfully saved');\r\n    //      }\r\n    //  })\r\n        //console.log(this.Employee);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n      const invalidCtrl = !!(control && control.invalid && control.parent.dirty);\r\n      const invalidParent = !!(control && control.parent && control.parent.invalid && control.parent.dirty);\r\n  \r\n      return (invalidCtrl || invalidParent);\r\n    }\r\n  }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { EmployeeRoutingModule } from './employee-routing.module';\r\nimport { EmployeeComponent } from './employee.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MaterialModule } from '../../material/material.module';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, EmployeeRoutingModule,FormsModule, MaterialModule],\r\n    declarations: [ EmployeeComponent ]\r\n})\r\nexport class EmployeeModule {}\r\n"],"sourceRoot":""}